% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Class_BANDITS_test.R
\docType{class}
\name{BANDITS_test-class}
\alias{BANDITS_test-class}
\alias{BANDITS_test,}
\alias{length,}
\alias{top_genes,}
\alias{top_transcripts,}
\alias{convergence,}
\alias{gene,}
\alias{transcript,}
\alias{plot_proportions}
\alias{length,BANDITS_test-method}
\alias{top_genes,BANDITS_test-method}
\alias{top_transcripts,BANDITS_test-method}
\alias{convergence,BANDITS_test-method}
\alias{show,BANDITS_test-method}
\alias{gene,BANDITS_test-method}
\alias{transcript,BANDITS_test-method}
\alias{plot_proportions,BANDITS_test-method}
\title{BANDITS_test class}
\usage{
\S4method{length}{BANDITS_test}(x)

\S4method{top_genes}{BANDITS_test}(x, n = Inf, sort_by = "p.value")

\S4method{top_transcripts}{BANDITS_test}(x, n = Inf, sort_by = "gene")

\S4method{convergence}{BANDITS_test}(x)

\S4method{show}{BANDITS_test}(object)

\S4method{gene}{BANDITS_test}(x, gene_id)

\S4method{transcript}{BANDITS_test}(x, transcript_id)

\S4method{plot_proportions}{BANDITS_test}(x, gene_id)
}
\value{
\itemize{
\item \code{show(object)}: returns the \code{head} of the gene and transcript level results and of the convergence diagnostic.
\item \code{top_genes(x, n = Inf,  sort_by = "p.value")}: returns the gene-level results of the DTU test for the top 'n' significant genes.
By default n = Inf and all results will be reported.
sort_by = "gene" for sorting results according to gene-level significance; sort_by = "DTU_measure" for sorting results according to the 'DTU_measure'.
\item \code{top_transcripts(x, n = Inf, sort_by = "gene")}: returns the transcript-level results of the DTU test for the top 'n' significant genes.
By default n = Inf and all results will be reported.
sort_by = "gene" for sorting results according to gene-level significance; sort_by = "transcript" for sorting results according to transcript-level significance.
\item \code{convergence(x)}: returns the convergence diagnostic of the posterior MCMC chains for every gene.
\item \code{gene(x, gene_id)}: returns a list with all results for the gene(s) specified in 'gene_id': gene results, corresponding transcript results and convergence diagnostic.
\item \code{transcript(x, transcript_id)}: returns a list with all results for the trancript specified in 'transcript_id': transcript results, corresponding gene results and convergence diagnostic.
\item \code{plot_proportions(x, gene_id, group_names = NULL)}: plots the posterior means of the average transcripts
 relative expression (i.e., the proportions) of each condition, for the gene specified in 'gene_id'.
 group_names is a carachter vector with the same length as the number of groups; if not provided, the first letters of the alphabet are used.
}
}
\description{
\code{BANDITS_test} contains the results of the differential transcript usage (DTU) test.
\code{BANDITS_test} is organized in three data.frames containing: gene-level results, 
transcript-level results and 
convergence diagnostics of the Markov chain Monte Carlo (MCMC) posterior chains.
Created via \code{\link{test_DTU}}.
To test for convergence, we use Heidelberger and Welch's convergence diagnostic,
implemented in \code{coda::heidel.diag}, to test for the stationarity of the 
chain for the full log-posterior density;
we use a 0.01 threshold on the p.value to reject the null hypotehsis of stationarity.
}
\section{Slots}{

\describe{
\item{\code{Gene_results}}{a \code{data.frame} containing the gene-level results of the DTU test, structured in the following columns:
\itemize{
\item Gene_id contains the gene names;
\item p.values is the gene-level p.values of the DTU test;
\item adj.p.values is the Benjamini-Hochberg adjusted p.values (via \code{\link{p.adjust}});
\item p.values_inverted (only available for 2-group comparisons) is a conservative p.value, accounting for the inversion of the dominant transcript between conditions;
\item adj.p.values_inverted (only available for 2-group comparisons) is the Benjamini-Hochberg adjusted p.values_inverted, via \code{\link{p.adjust}};
\item DTU_measure (only available for 2-group comparisons) represents a measure of the intensity of changes between conditions.
}}

\item{\code{Transcript_results}}{a \code{data.frame} containing the transcript-level results of the DTU test, structured in the following columns:
\itemize{
\item Gene_id contains the gene names;
\item Transcript_id contains the transcript names;
\item p.values is the transcript-level p.values of the DTU test;
\item adj.p.values is the Benjamini-Hochberg adjusted p.values (via \code{\link{p.adjust}});
\item Max_Gene_Tr.p.val is a conservative p.value (the maximum between the transcript p.value and corresponding gene p.value);
\item Max_Gene_Tr.Adj.p.val is the Benjamini-Hochberg adjusted Max_Gene_Tr.p.val (via \code{\link{p.adjust}});
\item Mean "group_name" indicates the posterior mean of the average relative abundance of the transcript in group "group_name".
}}

\item{\code{Convergence}}{a \code{data.frame} containing the convercence diagnostics of the DTU test, structured in the following columns:
\itemize{
\item Gene_id contains the gene names;
\item converged is 1 if convergence was reached, 0 otherwise;
\item burn_in indicates what fraction of the chain was removed to ensure convergence 
(excluding the \code{burn_in} parameter specified in \code{\link{test_DTU}}.
}}

\item{\code{samples_design}}{a \code{data.frame} containing the design of the experiment, with one row for each sample
and two columns with names 'sample_id' and 'group', specifying the id and group of each sample, respectively.
It is provided by the user to \code{\link{test_DTU}}.}
}}

\examples{
## Preliminary information

# specify the directory of the internal data:
data_dir = system.file("extdata", package = "BANDITS")
data_dir

# load gene_to_transcript matching:
data("GeneTr_id", package = "BANDITS")
# GeneTr_id contains transcripts ids on the first column
# and the corresponding gene ids on the second column:
head(GeneTr_id)

# Specify the directory of the transcript level estimated counts.
sample_names = paste0("sample", seq_len(4))
quant_files = file.path(data_dir, sample_names, "quant.sf")
file.exists(quant_files)

# Load the transcript level estimated counts via tximport:
library(tximport)
txi = tximport(files = quant_files, type = "salmon", txOut = TRUE)
counts = txi$counts
head(counts)

# We define the design of the study: in our case we have 2 groups, 
# that we call "A" and "B" of 2 samples each.
samples_design = data.frame(sample_id = sample_names,
                            group = c("A", "A", "B", "B"))
samples_design

# The groups are defined in:
levels(samples_design$group)



## Optional (recommended): transcript pre-filtering

transcripts_to_keep = filter_transcripts(gene_to_transcript = GeneTr_id,
                                         transcript_counts = counts,
                                         min_transcript_proportion = 0.01,
                                         min_transcript_counts = 10,
                                         min_gene_counts = 20)
head(transcripts_to_keep)



## Load the data:

# compute the Median estimated effective length for each transcript:
eff_len = eff_len_compute(x_eff_len = txi$length)

# specify the path to the equivalence classes:
equiv_classes_files = file.path(data_dir, sample_names, "aux_info", "eq_classes.txt")
file.exists(equiv_classes_files)

# Warning: the sample names in equiv_classes_files must have the same order
# as those in the design object, containted in samples_design.
equiv_classes_files
samples_design$sample_id

# create data and filter internally lowly abundant transcripts:
BANDITS_data = create_data(gene_to_transcript = GeneTr_id,
                           path_to_eq_classes = equiv_classes_files, eff_len = eff_len, 
                           n_cores = 2,
                           transcripts_to_keep = transcripts_to_keep)

# If transcripts pre-filtering is not wanted, 
# do not specify \\code{transcripts_to_keep} parameter.

# Filter lowly abundant genes:
BANDITS_data = filter_genes(BANDITS_data, min_counts_per_Gene = 20)



## Optional (recommended): infer an informative prior for the precision parameter

# Use the same filtering criteria as in \\code{\\link{filter_transcripts}}; 
# if transcript pre-filtering is not performed, set \\code{min_transcript_proportion},
# \\code{min_transcript_counts} and \\code{min_gene_counts} to 0.

set.seed(61217)
prec = prior_precision(gene_to_transcript = GeneTr_id, transcript_counts = counts,
                       min_transcript_proportion = 0.01, min_transcript_counts = 10,
                       min_gene_counts = 20, n_cores = 2)

# Plot the histogram of the genewise log-precision estimates.
# The black solid line represents the normally distributed prior distribution 
# for the log-precision parameter.
plot_precision(prec)



## Test for DTU
set.seed(61217)
x = test_DTU(BANDITS_data = BANDITS_data,
             prior_precision = prec$prior,
             samples_design = samples_design,
             R = 10^4, burn_in = 2*10^3, n_cores = 2,
             gene_to_transcript = GeneTr_id)
x

# Visualize the most significant Genes, sorted by gene level significance.
head(top_genes(x))

# Alternatively, gene-level results can also be sorted according to DTU_measure, 
# which is a measure of the strength of the change between the 
# average relative abundances of the two groups.
head(top_genes(x, sort_by = "DTU_measure"))

# Visualize the most significant transcripts, sorted by transcript level significance.
head(top_transcripts(x, sort_by = "transcript"))

# Visualize the convergence output for the most significant genes, 
# sorted by gene level significance.
head(convergence(x))

# We can further use the \\code{gene} function to gather all output for a specific gene:
# gene level, transcript level and convergence results.
top_gene = top_genes(x, n = 1)
gene(x, top_gene$Gene_id)

# Similarly we can use the \\code{transcript} function to gather all output 
# for a specific transcript.
top_transcript = top_transcripts(x, n = 1)
transcript(x, top_transcript$Transcript_id)

#Finally, we can plot the estimated average transcript relative expression 
# in the two groups for a specific gene via \\code{plot_proportions}.
library(ggplot2)
plot_proportions(x, top_gene$Gene_id)

}
\seealso{
\code{\link{test_DTU}}, \code{\link{create_data}}, \code{\linkS4class{BANDITS_data}}
}
\author{
Simone Tiberi
}
