% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Class_BANDITS_data.R
\docType{class}
\name{BANDITS_data-class}
\alias{BANDITS_data-class}
\alias{BANDITS_data}
\alias{show,BANDITS_data-method}
\title{BANDITS_data class}
\usage{
\S4method{show}{BANDITS_data}(object)
}
\value{
\itemize{
\item \code{show(object)}: returns the number of genes and transcripts in the \code{BANDITS_data} object.
}
}
\description{
\code{BANDITS_data} contains all the information required to perform differential transcript usage (DTU).
\code{BANDITS_data} associates each gene (genes), to its transcript ids (transcripts),
effective transcript lengths (effLen), equivalence classes (classes) and respective counts (counts).
The same structure is also used for groups of genes with reads/fragments compatible with >1 gene (with uniqueId == FALSE); 
in this case the 'genes' field contains all the genes ids in the group.
Created via \code{\link{create_data}}.
}
\section{Slots}{

\describe{
\item{\code{genes}}{\code{list} of gene names: each element is a vector of 1 or 
more gene names indicating the genes to be analyzed together.}

\item{\code{transcripts}}{\code{list} of transcript names: each element is a vector of 1 or
more transcript names indicating the transcripts matching the gene names in the corresponding element of @genes object.}

\item{\code{effLen}}{\code{list} of transcript effective lengths: each element is a vector of 1 or
more numbers, indicating the effective length of the transcripts in the corresponding element of @transcripts object.}

\item{\code{classes}}{\code{list} of matrices: the (i,j) element of each matrix is 1 if the i-th transcript
is present in the j-th equivalence class, 0 otherwise.}

\item{\code{counts}}{\code{list} of matrices: the (i,j) element indicates the reads/fragments compatible with 
the i-th equivalence class in sample j.}

\item{\code{uniqueId}}{\code{logical}, it indicates if the element contains one gene to be analyzed alone (TRUE),
or more genes to be analyzed jointly (FALSE).}

\item{\code{all_genes}}{\code{vector}, it lists all the genes to be analyzed (with at least 2 transcripts).}
}}

\examples{
## Preliminary information

# specify the directory of the internal data:
data_dir = system.file("extdata", package = "BANDITS")
data_dir

# load gene_to_transcript matching:
data("GeneTr_id", package = "BANDITS")
# GeneTr_id contains transcripts ids on the first column
# and the corresponding gene ids on the second column:
head(GeneTr_id)

# Specify the directory of the transcript level estimated counts.
sample_names = paste0("sample", seq_len(4))
quant_files = file.path(data_dir, sample_names, "quant.sf")
file.exists(quant_files)

# Load the transcript level estimated counts via tximport:
library(tximport)
txi = tximport(files = quant_files, type = "salmon", txOut = TRUE)
counts = txi$counts
head(counts)



## Optional (recommended): transcript pre-filtering

transcripts_to_keep = filter_transcripts(gene_to_transcript = GeneTr_id,
                                         transcript_counts = counts, min_transcript_proportion = 0.01,
                                         min_transcript_counts = 10, min_gene_counts = 20)
head(transcripts_to_keep)



## Load the data:

# compute the Median estimated effective length for each transcript:
eff_len = eff_len_compute(x_eff_len = txi$length)

# specify the path to the equivalence classes:
equiv_classes_files = file.path(data_dir, sample_names, "aux_info", "eq_classes.txt")
file.exists(equiv_classes_files)


# create data and filter internally lowly abundant transcripts:
BANDITS_data = create_data(gene_to_transcript = GeneTr_id,
                           path_to_eq_classes = equiv_classes_files, eff_len = eff_len, 
                           n_cores = 2,
                           transcripts_to_keep = transcripts_to_keep)

# If transcripts pre-filtering is not wanted, do not specify \\code{transcripts\\_to\\_keep} parameter.

}
\seealso{
\code{\link{create_data}}, \code{\link{filter_transcripts}},  \code{\link{eff_len_compute}}
}
\author{
Simone Tiberi
}
